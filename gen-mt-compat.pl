#!/usr/bin/perl
use strict;
use warnings;

my $REPLACE_SYMS = {
    lcb_wait => { alias => "lcbmt__Wwait" },
    lcb_connect => {alias => "lcbmt__Wconnect" },
    lcb_create => { alias => "lcbmt_create" },
    lcb_install_callback3 => { alias => "lcbmt_install_callback" },
    lcb_sched_enter => { alias => "lcbmt__Wenter3" },
    lcb_sched_leave => { alias => "lcbmt__Wleave3" }
};

my @REVERSE_MAP2 = ();
my @REVERSE_MAP3 = ();

foreach my $fn (qw(lcb_get lcb_store lcb_remove lcb_unlock lcb_touch lcb_arithmetic lcb_server_stats)) {
    my $revname = "lcb__${fn}__NTS";
    my $info = {
        'define_as' => "${fn}(obj, cookie, num, cmds) lcbmt__Wwrap2(obj, cookie, num, (const void * const *)cmds, \"$fn\")"
    };

    $REPLACE_SYMS->{$fn} = $info;
    push @REVERSE_MAP2, $fn;
}

foreach my $fn (qw(lcb_get3 lcb_store3 lcb_remove3 lcb_unlock3 lcb_touch3 lcb_counter3 lcb_stats3)) {
    my $revname = "lcb_${fn}__NTS";
    my $info = {
        'define_as' => "${fn}(obj, cookie, cmd) lcbmt__Wwrap3(obj, cookie, cmd, \"$fn\")"
    };
    push @REVERSE_MAP3, $fn;
    $REPLACE_SYMS->{$fn} = $info;
}


open my $f_hdr, ">", "include/libcouchbase/mt-compat.h" or die $!;
open my $r_src, ">", "src/mt/wrap-targets.h" or die $!;

my $time = scalar(localtime());
print $f_hdr <<"EOF";
/* This file generated by $0 at $time */
#ifndef LCB_MT_COMPAT_H
#define LCB_MT_COMPAT_H
EOF

while (my ($key,$info) = each %$REPLACE_SYMS) {
    print $f_hdr "#define $key lcb__NTS_${key}\n";
}

print $f_hdr <<"EOF";
/* Now include stuff */
#include <libcouchbase/mt.h>
EOF

while (my ($key,$info) = each %$REPLACE_SYMS) {
    print $f_hdr "#undef ${key}\n";

    if ($info->{alias}) {
        printf $f_hdr ("#define %s %s\n", $key, $info->{alias});
    } else {
        printf $f_hdr ("#define %s\n", $info->{define_as});
    }
}
print $f_hdr "#endif\n";

print $r_src <<"EOF";
static lcbmt__schedfunc_v2
find_wrap_target2(const char *name) {
EOF
foreach my $name (@REVERSE_MAP2) {
    printf $r_src ('if (!strcmp(name, "%s")) { return (lcbmt__schedfunc_v2)%s; }'."\n", $name, $name);
}
print $r_src "abort();return NULL; }\n";

print $r_src <<"EOF";
static lcbmt__schedfunc_v3
find_wrap_target3(const char *name) {
EOF

foreach my $name (@REVERSE_MAP3) {
    printf $r_src ('if (!strcmp(name, "%s")) { return (lcbmt__schedfunc_v3)%s; }'."\n", $name, $name);
}
print $r_src "abort();return NULL; }\n";

